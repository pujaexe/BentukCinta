// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6366ps4JUXGcyRNfgAokBX
// Component: cWWh_VXruR120
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { GraphCMSFetcher } from "@plasmicpkgs/plasmic-graphcms"; // plasmic-import: 8sYtOZawA08/codeComponent
import { GraphCMSField } from "@plasmicpkgs/plasmic-graphcms"; // plasmic-import: _3Kx5FMtA8n/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bentukcinta.module.css"; // plasmic-import: 6366ps4JUXGcyRNfgAokBX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: cWWh_VXruR120/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<"div">;
  alingLeft?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  h5?: p.Flex<"h5">;
  navMenu?: p.Flex<"div">;
  tentangKami?: p.Flex<"a"> & Partial<LinkProps>;
  harga?: p.Flex<"a"> & Partial<LinkProps>;
  faq?: p.Flex<"a"> & Partial<LinkProps>;
  alingRigth?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  img?: p.Flex<typeof p.PlasmicImg>;
  graphCmsFetcher?: p.Flex<typeof GraphCMSFetcher>;
  graphCmsField?: p.Flex<typeof GraphCMSField>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames(projectcss.all, sty.navBar)}
          >
            <div
              data-plasmic-name={"alingLeft"}
              data-plasmic-override={overrides.alingLeft}
              className={classNames(projectcss.all, sty.alingLeft)}
            >
              {true ? (
                <div
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames(projectcss.all, sty.logo)}
                >
                  <h5
                    data-plasmic-name={"h5"}
                    data-plasmic-override={overrides.h5}
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5
                    )}
                  >
                    {"Bentuk Cinta"}
                  </h5>
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"navMenu"}
                data-plasmic-override={overrides.navMenu}
                hasGap={true}
                className={classNames(projectcss.all, sty.navMenu)}
              >
                <p.PlasmicLink
                  data-plasmic-name={"tentangKami"}
                  data-plasmic-override={overrides.tentangKami}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.tentangKami
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hoijD
                    )}
                  >
                    {"Tentang Kami"}
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  data-plasmic-name={"harga"}
                  data-plasmic-override={overrides.harga}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.harga
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kv1Cv
                    )}
                  >
                    {"Harga"}
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  data-plasmic-name={"faq"}
                  data-plasmic-override={overrides.faq}
                  className={classNames(projectcss.all, projectcss.a, sty.faq)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Fi9
                    )}
                  >
                    {"FAQ"}
                  </div>
                </p.PlasmicLink>
              </p.Stack>
            </div>

            <div
              data-plasmic-name={"alingRigth"}
              data-plasmic-override={overrides.alingRigth}
              className={classNames(projectcss.all, sty.alingRigth)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__e8TRn
                )}
                component={Link}
                platform={"nextjs"}
              >
                <h6
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6___6A10Q
                  )}
                >
                  {"Hubungi Kami"}
                </h6>
              </p.PlasmicLink>
            </div>
          </div>

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Ciee masih ngundang pake kartu! Online Donk!"}
            </h1>

            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6___7AAcH
              )}
            >
              {
                "Bentukcinta.com siap membantu mu bikinin undangan online yang keren, kekinian dan hemat waktu, biar kamu ga ngundang pake cara lama,"
              }
            </h6>

            <div className={classNames(projectcss.all, sty.freeBox___46RYd)}>
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/bentukcinta/images/phoneImageMinpng.png",
                  fullWidth: 600,
                  fullHeight: 710,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ftCi)}>
              <GraphCMSFetcher
                data-plasmic-name={"graphCmsFetcher"}
                data-plasmic-override={overrides.graphCmsFetcher}
                className={classNames("__wab_instance", sty.graphCmsFetcher)}
                noLayout={true}
                query={{
                  query:
                    "query MyQuery {\n  pengantins {\n    id\n    slug\n    title\n  }\n}\n",
                  variables: {}
                }}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kBxD)}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__twWtR
                        )}
                        component={Link}
                        href={`/${(() => {
                          try {
                            return $ctx.graphCmsItem.slug;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "";
                            }
                            throw e;
                          }
                        })()}`}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <GraphCMSField
                          data-plasmic-name={"graphCmsField"}
                          data-plasmic-override={overrides.graphCmsField}
                          className={classNames(
                            "__wab_instance",
                            sty.graphCmsField
                          )}
                          path={["title"]}
                        />
                      </p.PlasmicLink>
                    </div>
                  )}
                </ph.DataCtxReader>
              </GraphCMSFetcher>
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "alingLeft",
    "logo",
    "h5",
    "navMenu",
    "tentangKami",
    "harga",
    "faq",
    "alingRigth",
    "section",
    "h1",
    "img",
    "graphCmsFetcher",
    "graphCmsField"
  ],
  navBar: [
    "navBar",
    "alingLeft",
    "logo",
    "h5",
    "navMenu",
    "tentangKami",
    "harga",
    "faq",
    "alingRigth"
  ],
  alingLeft: [
    "alingLeft",
    "logo",
    "h5",
    "navMenu",
    "tentangKami",
    "harga",
    "faq"
  ],
  logo: ["logo", "h5"],
  h5: ["h5"],
  navMenu: ["navMenu", "tentangKami", "harga", "faq"],
  tentangKami: ["tentangKami"],
  harga: ["harga"],
  faq: ["faq"],
  alingRigth: ["alingRigth"],
  section: ["section", "h1", "img", "graphCmsFetcher", "graphCmsField"],
  h1: ["h1"],
  img: ["img"],
  graphCmsFetcher: ["graphCmsFetcher", "graphCmsField"],
  graphCmsField: ["graphCmsField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: "div";
  alingLeft: "div";
  logo: "div";
  h5: "h5";
  navMenu: "div";
  tentangKami: "a";
  harga: "a";
  faq: "a";
  alingRigth: "div";
  section: "section";
  h1: "h1";
  img: typeof p.PlasmicImg;
  graphCmsFetcher: typeof GraphCMSFetcher;
  graphCmsField: typeof GraphCMSField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    alingLeft: makeNodeComponent("alingLeft"),
    logo: makeNodeComponent("logo"),
    h5: makeNodeComponent("h5"),
    navMenu: makeNodeComponent("navMenu"),
    tentangKami: makeNodeComponent("tentangKami"),
    harga: makeNodeComponent("harga"),
    faq: makeNodeComponent("faq"),
    alingRigth: makeNodeComponent("alingRigth"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    img: makeNodeComponent("img"),
    graphCmsFetcher: makeNodeComponent("graphCmsFetcher"),
    graphCmsField: makeNodeComponent("graphCmsField"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "bentukcinta",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
