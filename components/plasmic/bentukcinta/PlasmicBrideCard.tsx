// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6366ps4JUXGcyRNfgAokBX
// Component: D8Nie4k4_Z
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bentukcinta.module.css"; // plasmic-import: 6366ps4JUXGcyRNfgAokBX/projectcss
import sty from "./PlasmicBrideCard.module.css"; // plasmic-import: D8Nie4k4_Z/css

export type PlasmicBrideCard__VariantMembers = {
  isBrideBadge: "isBrideBadge";
};

export type PlasmicBrideCard__VariantsArgs = {
  isBrideBadge?: SingleBooleanChoiceArg<"isBrideBadge">;
};

type VariantPropType = keyof PlasmicBrideCard__VariantsArgs;
export const PlasmicBrideCard__VariantProps = new Array<VariantPropType>(
  "isBrideBadge"
);

export type PlasmicBrideCard__ArgsType = {
  brideName?: React.ReactNode;
  ortuBride?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBrideCard__ArgsType;
export const PlasmicBrideCard__ArgProps = new Array<ArgPropType>(
  "brideName",
  "ortuBride",
  "children",
  "slot"
);

export type PlasmicBrideCard__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultBrideCardProps {
  brideName?: React.ReactNode;
  ortuBride?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  isBrideBadge?: SingleBooleanChoiceArg<"isBrideBadge">;
  className?: string;
}

function PlasmicBrideCard__RenderFunc(props: {
  variants: PlasmicBrideCard__VariantsArgs;
  args: PlasmicBrideCard__ArgsType;
  overrides: PlasmicBrideCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(variants, "isBrideBadge", "isBrideBadge") ? true : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxisBrideBadge]: hasVariant(
              variants,
              "isBrideBadge",
              "isBrideBadge"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__yQdj1)}
                displayHeight={"200px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"200px" as const}
                loading={"lazy" as const}
                src={"https://via.placeholder.com/200" as const}
              />
            ),

            value: args.slot
          })}
        </div>
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: (
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__cvjp6
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span__ef0D4
                  )}
                >
                  {"John Stewart"}
                </span>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </h4>
        ),

        value: args.brideName
      })}

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Putra dari pasangan"}
      </div>

      {p.renderPlasmicSlot({
        defaultContents: (
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__kGt6S
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span___3YKa8
                  )}
                >
                  {"john lenon & John Lenin"}
                </span>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </h6>
        ),

        value: args.ortuBride
      })}

      {p.renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pCpgz
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span__sc31B
                  )}
                >
                  {"This is address wrapper"}
                </span>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        ),

        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBrideCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBrideCard__VariantsArgs;
    args?: PlasmicBrideCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBrideCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBrideCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBrideCard__ArgProps,
          internalVariantPropNames: PlasmicBrideCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBrideCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBrideCard";
  } else {
    func.displayName = `PlasmicBrideCard.${nodeName}`;
  }
  return func;
}

export const PlasmicBrideCard = Object.assign(
  // Top-level PlasmicBrideCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicBrideCard
    internalVariantProps: PlasmicBrideCard__VariantProps,
    internalArgProps: PlasmicBrideCard__ArgProps
  }
);

export default PlasmicBrideCard;
/* prettier-ignore-end */
