// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6366ps4JUXGcyRNfgAokBX
// Component: ygw79zXKnU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { GraphCMSFetcher } from "@plasmicpkgs/plasmic-graphcms"; // plasmic-import: 8sYtOZawA08/codeComponent
import TemplateSelector from "../../TemplateSelector"; // plasmic-import: tV2xuA4xJL/component
import Template1 from "../../Template1"; // plasmic-import: GJ6j9vTAsC/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bentukcinta.module.css"; // plasmic-import: 6366ps4JUXGcyRNfgAokBX/projectcss
import sty from "./PlasmicInvitation.module.css"; // plasmic-import: ygw79zXKnU/css

export type PlasmicInvitation__VariantMembers = {};
export type PlasmicInvitation__VariantsArgs = {};
type VariantPropType = keyof PlasmicInvitation__VariantsArgs;
export const PlasmicInvitation__VariantProps = new Array<VariantPropType>();

export type PlasmicInvitation__ArgsType = {};
type ArgPropType = keyof PlasmicInvitation__ArgsType;
export const PlasmicInvitation__ArgProps = new Array<ArgPropType>();

export type PlasmicInvitation__OverridesType = {
  root?: p.Flex<"div">;
  graphCmsFetcher?: p.Flex<typeof GraphCMSFetcher>;
  templateSelector?: p.Flex<typeof TemplateSelector>;
  template1?: p.Flex<typeof Template1>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultInvitationProps {}

function PlasmicInvitation__RenderFunc(props: {
  variants: PlasmicInvitation__VariantsArgs;
  args: PlasmicInvitation__ArgsType;
  overrides: PlasmicInvitation__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <GraphCMSFetcher
            data-plasmic-name={"graphCmsFetcher"}
            data-plasmic-override={overrides.graphCmsFetcher}
            className={classNames("__wab_instance", sty.graphCmsFetcher)}
            noLayout={true}
            query={(() => {
              try {
                return {
                  query:
                    'query MyQuery {\n pengantin(where: {slug: "' +
                    $ctx.params.slug +
                    '"}) {\n slug\n title\n eventLocation\n gmapsEmbed\n evenDateTime\n eventMap {\n latitude\n longitude\n }\n phone1\n phone2\n pengantinPria\n pengantinWanita\n bapakPria\n bapakWanita\n ibuPria\n ibuWanita\n alamatPria\n alamatWanita\n coverPhoto\n photoPria\n photoWanita\n youtubeUrl\n templateUse\n audioUrl\n }\n}\n',
                  variables: {}
                };
              } catch (e) {
                if (e instanceof TypeError) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <TemplateSelector
                  data-plasmic-name={"templateSelector"}
                  data-plasmic-override={overrides.templateSelector}
                  className={classNames("__wab_instance", sty.templateSelector)}
                  template1={
                    <Template1
                      data-plasmic-name={"template1"}
                      data-plasmic-override={overrides.template1}
                      bgMasshead={
                        <p.PlasmicImg
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return $ctx.graphCmsItem.coverPhoto;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      }
                      className={classNames("__wab_instance", sty.template1)}
                      title={(() => {
                        try {
                          return $ctx.graphCmsItem.title;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Jonh & Merry";
                          }
                          throw e;
                        }
                      })()}
                    />
                  }
                />
              )}
            </ph.DataCtxReader>
          </GraphCMSFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "graphCmsFetcher", "templateSelector", "template1", "img"],
  graphCmsFetcher: ["graphCmsFetcher", "templateSelector", "template1", "img"],
  templateSelector: ["templateSelector", "template1", "img"],
  template1: ["template1", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  graphCmsFetcher: typeof GraphCMSFetcher;
  templateSelector: typeof TemplateSelector;
  template1: typeof Template1;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInvitation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInvitation__VariantsArgs;
    args?: PlasmicInvitation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInvitation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInvitation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInvitation__ArgProps,
          internalVariantPropNames: PlasmicInvitation__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicInvitation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInvitation";
  } else {
    func.displayName = `PlasmicInvitation.${nodeName}`;
  }
  return func;
}

export const PlasmicInvitation = Object.assign(
  // Top-level PlasmicInvitation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    graphCmsFetcher: makeNodeComponent("graphCmsFetcher"),
    templateSelector: makeNodeComponent("templateSelector"),
    template1: makeNodeComponent("template1"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicInvitation
    internalVariantProps: PlasmicInvitation__VariantProps,
    internalArgProps: PlasmicInvitation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInvitation;
/* prettier-ignore-end */
