// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6366ps4JUXGcyRNfgAokBX
// Component: q8Lmfm3hoF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TombolCinta from "../../TombolCinta"; // plasmic-import: KWGUqEZOm9/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bentukcinta.module.css"; // plasmic-import: 6366ps4JUXGcyRNfgAokBX/projectcss
import sty from "./PlasmicPriceCard.module.css"; // plasmic-import: q8Lmfm3hoF/css

export type PlasmicPriceCard__VariantMembers = {
  isHighlight: "isHighlight";
  isAddDescription: "isAddDescription";
};

export type PlasmicPriceCard__VariantsArgs = {
  isHighlight?: SingleBooleanChoiceArg<"isHighlight">;
  isAddDescription?: SingleBooleanChoiceArg<"isAddDescription">;
};

type VariantPropType = keyof PlasmicPriceCard__VariantsArgs;
export const PlasmicPriceCard__VariantProps = new Array<VariantPropType>(
  "isHighlight",
  "isAddDescription"
);

export type PlasmicPriceCard__ArgsType = {
  harga?: React.ReactNode;
  item?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  linkProp?: string;
};

type ArgPropType = keyof PlasmicPriceCard__ArgsType;
export const PlasmicPriceCard__ArgProps = new Array<ArgPropType>(
  "harga",
  "item",
  "children",
  "slot",
  "linkProp"
);

export type PlasmicPriceCard__OverridesType = {
  root?: p.Flex<"div">;
  title?: p.Flex<"div">;
  price?: p.Flex<"div">;
  item?: p.Flex<"div">;
  addedDescription?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  tombolCinta?: p.Flex<typeof TombolCinta>;
};

export interface DefaultPriceCardProps {
  harga?: React.ReactNode;
  item?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  linkProp?: string;
  isHighlight?: SingleBooleanChoiceArg<"isHighlight">;
  isAddDescription?: SingleBooleanChoiceArg<"isAddDescription">;
  className?: string;
}

function PlasmicPriceCard__RenderFunc(props: {
  variants: PlasmicPriceCard__VariantsArgs;
  args: PlasmicPriceCard__ArgsType;
  overrides: PlasmicPriceCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          linkProp: "" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisAddDescription]: hasVariant(
            variants,
            "isAddDescription",
            "isAddDescription"
          ),
          [sty.rootisHighlight]: hasVariant(
            variants,
            "isHighlight",
            "isHighlight"
          )
        }
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          hasGap={true}
          className={classNames(projectcss.all, sty.title, {
            [sty.titleisHighlight]: hasVariant(
              variants,
              "isHighlight",
              "isHighlight"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Dasar",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenisHighlight]: hasVariant(
                variants,
                "isHighlight",
                "isHighlight"
              )
            })
          })}

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"price"}
              data-plasmic-override={overrides.price}
              hasGap={true}
              className={classNames(projectcss.all, sty.price)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zkVdl
                      )}
                    >
                      {"Rp 100.000"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vy7Q6
                      )}
                    >
                      {" Gratis"}
                    </div>
                  </React.Fragment>
                ),
                value: args.harga,
                className: classNames(sty.slotTargetHarga, {
                  [sty.slotTargetHargaisHighlight]: hasVariant(
                    variants,
                    "isHighlight",
                    "isHighlight"
                  )
                })
              })}
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "isAddDescription", "isAddDescription")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"item"}
          data-plasmic-override={overrides.item}
          className={classNames(projectcss.all, sty.item, {
            [sty.itemisAddDescription]: hasVariant(
              variants,
              "isAddDescription",
              "isAddDescription"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wsMd2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mRYc3
                  )}
                >
                  {"âœ…"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mv4OX
                  )}
                >
                  {"Pilih Tema Standar"}
                </div>
              </p.Stack>
            ),

            value: args.item,
            className: classNames(sty.slotTargetItem, {
              [sty.slotTargetItemisAddDescription]: hasVariant(
                variants,
                "isAddDescription",
                "isAddDescription"
              ),
              [sty.slotTargetItemisHighlight]: hasVariant(
                variants,
                "isHighlight",
                "isHighlight"
              )
            })
          })}
        </div>
      ) : null}
      {(
        hasVariant(variants, "isAddDescription", "isAddDescription")
          ? true
          : hasVariant(variants, "isHighlight", "isHighlight")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"addedDescription"}
          data-plasmic-override={overrides.addedDescription}
          className={classNames(projectcss.all, sty.addedDescription, {
            [sty.addedDescriptionisAddDescription]: hasVariant(
              variants,
              "isAddDescription",
              "isAddDescription"
            ),
            [sty.addedDescriptionisHighlight]: hasVariant(
              variants,
              "isHighlight",
              "isHighlight"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.slot
          })}
        </div>
      ) : null}

      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linkisHighlight]: hasVariant(
            variants,
            "isHighlight",
            "isHighlight"
          )
        })}
        component={Link}
        href={(() => {
          try {
            return $props.linkProp;
          } catch (e) {
            if (e instanceof TypeError) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <TombolCinta
          data-plasmic-name={"tombolCinta"}
          data-plasmic-override={overrides.tombolCinta}
          className={classNames("__wab_instance", sty.tombolCinta, {
            [sty.tombolCintaisAddDescription]: hasVariant(
              variants,
              "isAddDescription",
              "isAddDescription"
            ),
            [sty.tombolCintaisHighlight]: hasVariant(
              variants,
              "isHighlight",
              "isHighlight"
            )
          })}
          size={"large" as const}
          type={
            hasVariant(variants, "isHighlight", "isHighlight")
              ? ("secondary" as const)
              : ("primary" as const)
          }
        >
          {"Tombol Cinta"}
        </TombolCinta>
      </p.PlasmicLink>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "title",
    "price",
    "item",
    "addedDescription",
    "link",
    "tombolCinta"
  ],
  title: ["title", "price"],
  price: ["price"],
  item: ["item"],
  addedDescription: ["addedDescription"],
  link: ["link", "tombolCinta"],
  tombolCinta: ["tombolCinta"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  title: "div";
  price: "div";
  item: "div";
  addedDescription: "div";
  link: "a";
  tombolCinta: typeof TombolCinta;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceCard__VariantsArgs;
    args?: PlasmicPriceCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPriceCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPriceCard__ArgProps,
          internalVariantPropNames: PlasmicPriceCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPriceCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceCard";
  } else {
    func.displayName = `PlasmicPriceCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceCard = Object.assign(
  // Top-level PlasmicPriceCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    price: makeNodeComponent("price"),
    item: makeNodeComponent("item"),
    addedDescription: makeNodeComponent("addedDescription"),
    link: makeNodeComponent("link"),
    tombolCinta: makeNodeComponent("tombolCinta"),

    // Metadata about props expected for PlasmicPriceCard
    internalVariantProps: PlasmicPriceCard__VariantProps,
    internalArgProps: PlasmicPriceCard__ArgProps
  }
);

export default PlasmicPriceCard;
/* prettier-ignore-end */
