// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6366ps4JUXGcyRNfgAokBX
// Component: ZsxWBfHDXcp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bentukcinta.module.css"; // plasmic-import: 6366ps4JUXGcyRNfgAokBX/projectcss
import sty from "./PlasmicTemplate2.module.css"; // plasmic-import: ZsxWBfHDXcp/css

export type PlasmicTemplate2__VariantMembers = {};

export type PlasmicTemplate2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTemplate2__VariantsArgs;
export const PlasmicTemplate2__VariantProps = new Array<VariantPropType>();

export type PlasmicTemplate2__ArgsType = {
  bgMasshead?: React.ReactNode;
  children?: React.ReactNode;
  bulan?: React.ReactNode;
  tahun?: React.ReactNode;
  tanggal?: React.ReactNode;
  imgPria?: React.ReactNode;
  namaPria?: React.ReactNode;
  ortuPria?: React.ReactNode;
  alamatPria?: React.ReactNode;
  imgWanita?: React.ReactNode;
  namaPria2?: React.ReactNode;
  ortuWanita?: React.ReactNode;
  alamatWanita?: React.ReactNode;
  date?: React.ReactNode;
  time?: React.ReactNode;
  address?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTemplate2__ArgsType;
export const PlasmicTemplate2__ArgProps = new Array<ArgPropType>(
  "bgMasshead",
  "children",
  "bulan",
  "tahun",
  "tanggal",
  "imgPria",
  "namaPria",
  "ortuPria",
  "alamatPria",
  "imgWanita",
  "namaPria2",
  "ortuWanita",
  "alamatWanita",
  "date",
  "time",
  "address"
);

export type PlasmicTemplate2__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"header">;
  imageContainer?: p.Flex<"div">;
  heroTitle?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  freeBox?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  details?: p.Flex<"section">;
  col?: p.Flex<"div">;
  title?: p.Flex<"div">;
  detailsPengantin?: p.Flex<"div">;
  colPria?: p.Flex<"div">;
  priaDetailsWrapper?: p.Flex<"div">;
  colWanita?: p.Flex<"div">;
  priaDetailsWrapper2?: p.Flex<"div">;
  greetings?: p.Flex<"div">;
  eventDateTime?: p.Flex<"div">;
  dateTimeWrapper?: p.Flex<"div">;
  dateWrapper?: p.Flex<"div">;
  timeWrapper?: p.Flex<"div">;
  timeWrapper2?: p.Flex<"div">;
  addressWrapperContainer?: p.Flex<"div">;
  addressWrapper?: p.Flex<"div">;
  closing?: p.Flex<"div">;
};

export interface DefaultTemplate2Props {
  bgMasshead?: React.ReactNode;
  children?: React.ReactNode;
  bulan?: React.ReactNode;
  tahun?: React.ReactNode;
  tanggal?: React.ReactNode;
  imgPria?: React.ReactNode;
  namaPria?: React.ReactNode;
  ortuPria?: React.ReactNode;
  alamatPria?: React.ReactNode;
  imgWanita?: React.ReactNode;
  namaPria2?: React.ReactNode;
  ortuWanita?: React.ReactNode;
  alamatWanita?: React.ReactNode;
  date?: React.ReactNode;
  time?: React.ReactNode;
  address?: React.ReactNode;
  className?: string;
}

function PlasmicTemplate2__RenderFunc(props: {
  variants: PlasmicTemplate2__VariantsArgs;
  args: PlasmicTemplate2__ArgsType;
  overrides: PlasmicTemplate2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {true ? (
        <header
          data-plasmic-name={"hero"}
          data-plasmic-override={overrides.hero}
          className={classNames(projectcss.all, sty.hero)}
        >
          <div
            data-plasmic-name={"imageContainer"}
            data-plasmic-override={overrides.imageContainer}
            className={classNames(projectcss.all, sty.imageContainer)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__lqqwG)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={"https://via.placeholder.com/1920x1080" as const}
                />
              ),

              value: args.bgMasshead
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"heroTitle"}
            data-plasmic-override={overrides.heroTitle}
            hasGap={true}
            className={classNames(projectcss.all, sty.heroTitle)}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__rfi5L
              )}
            >
              {"UNDANGAN PERNIKAHAN"}
            </h6>

            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, sty.h1)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "John & Marry",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </h1>

            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6___5VWz
              )}
            >
              {
                "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES"
              }
            </h6>

            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  sty.p___2QzBn
                )}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Bulan",
                  value: args.bulan,
                  className: classNames(sty.slotTargetBulan)
                })}
              </p>

              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(projectcss.all, projectcss.h3, sty.h3)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "00",
                  value: args.tanggal,
                  className: classNames(sty.slotTargetTanggal)
                })}
              </h3>

              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  sty.p___0ImlA
                )}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "2022",
                  value: args.tahun,
                  className: classNames(sty.slotTargetTahun)
                })}
              </p>
            </p.Stack>
          </p.Stack>
        </header>
      ) : null}

      <section
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        className={classNames(projectcss.all, sty.details)}
      >
        <div
          data-plasmic-name={"col"}
          data-plasmic-override={overrides.col}
          className={classNames(projectcss.all, sty.col)}
        >
          {true ? (
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ksHxY
                )}
              >
                {"OmSwastiastu"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hzDq1
                )}
              >
                {"Mohon Doa Restu"}
              </div>
            </div>
          ) : null}

          <div
            data-plasmic-name={"detailsPengantin"}
            data-plasmic-override={overrides.detailsPengantin}
            className={classNames(projectcss.all, sty.detailsPengantin)}
          >
            <div
              data-plasmic-name={"colPria"}
              data-plasmic-override={overrides.colPria}
              className={classNames(projectcss.all, sty.colPria)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__i926D)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"200px" as const}
                    loading={"lazy" as const}
                    src={"https://via.placeholder.com/200" as const}
                  />
                ),

                value: args.imgPria
              })}

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"priaDetailsWrapper"}
                  data-plasmic-override={overrides.priaDetailsWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.priaDetailsWrapper)}
                >
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      sty.h6___4Hk8S
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "John Stewart",
                      value: args.namaPria,
                      className: classNames(sty.slotTargetNamaPria)
                    })}
                  </h6>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mFoz0
                    )}
                  >
                    {"Putra dari pasangan"}
                  </div>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      sty.p__iomge
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "john lenon & John Lenin",
                      value: args.ortuPria,
                      className: classNames(sty.slotTargetOrtuPria)
                    })}
                  </p>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      sty.p__ahpOi
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "This is address wrapper",
                      value: args.alamatPria,
                      className: classNames(sty.slotTargetAlamatPria)
                    })}
                  </p>
                </p.Stack>
              ) : null}
            </div>

            <div
              data-plasmic-name={"colWanita"}
              data-plasmic-override={overrides.colWanita}
              className={classNames(projectcss.all, sty.colWanita)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___3KEv5)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"200px" as const}
                    loading={"lazy" as const}
                    src={"https://via.placeholder.com/200" as const}
                  />
                ),

                value: args.imgWanita
              })}

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"priaDetailsWrapper2"}
                  data-plasmic-override={overrides.priaDetailsWrapper2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.priaDetailsWrapper2
                  )}
                >
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      sty.h6__efsBx
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "John Stewart",
                      value: args.namaPria2,
                      className: classNames(sty.slotTargetNamaPria2)
                    })}
                  </h6>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0W7JN
                    )}
                  >
                    {"Putra dari pasangan"}
                  </div>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      sty.p__fv0Am
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "john lenon & John Lenin",
                      value: args.ortuWanita,
                      className: classNames(sty.slotTargetOrtuWanita)
                    })}
                  </p>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      sty.p__lxgAd
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "This is address wrapper",
                      value: args.alamatWanita,
                      className: classNames(sty.slotTargetAlamatWanita)
                    })}
                  </p>
                </p.Stack>
              ) : null}
            </div>
          </div>

          {true ? (
            <div
              data-plasmic-name={"greetings"}
              data-plasmic-override={overrides.greetings}
              className={classNames(projectcss.all, sty.greetings)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wgy66
                )}
              >
                {
                  "Atas Asung Kertha Wara Nugraha Ida Sang Hyang Widhi Wasa/Tuhan Yang Maha Esa kami bermaksud mengundang Bapak/Ibu/Saudara/i pada Upacara Manusa Yadnya Pawiwahan (Pernikahan) Putra dan Putri kami"
                }
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7GJqw
                )}
              >
                {
                  "Merupakan suatu kehormatan dan kebahagiaan bagi kami, apabila Bapak / Ibu / Saudara / i berkenan hadir untuk memberikan doa restu, pada:"
                }
              </div>
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"eventDateTime"}
              data-plasmic-override={overrides.eventDateTime}
              className={classNames(projectcss.all, sty.eventDateTime)}
            >
              {true ? (
                <div
                  data-plasmic-name={"dateTimeWrapper"}
                  data-plasmic-override={overrides.dateTimeWrapper}
                  className={classNames(projectcss.all, sty.dateTimeWrapper)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uscL5
                    )}
                  >
                    {"hari/tanggal"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dz7WC
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"dateWrapper"}
                    data-plasmic-override={overrides.dateWrapper}
                    className={classNames(projectcss.all, sty.dateWrapper)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "date&time",
                      value: args.date,
                      className: classNames(sty.slotTargetDate)
                    })}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"timeWrapper"}
                  data-plasmic-override={overrides.timeWrapper}
                  className={classNames(projectcss.all, sty.timeWrapper)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bizY1
                    )}
                  >
                    {"Pukul"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pBo3
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"timeWrapper2"}
                    data-plasmic-override={overrides.timeWrapper2}
                    className={classNames(projectcss.all, sty.timeWrapper2)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "time",
                      value: args.time,
                      className: classNames(sty.slotTargetTime)
                    })}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"addressWrapperContainer"}
                  data-plasmic-override={overrides.addressWrapperContainer}
                  className={classNames(
                    projectcss.all,
                    sty.addressWrapperContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gRUtw
                    )}
                  >
                    {"Alamat"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d5Lan
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"addressWrapper"}
                    data-plasmic-override={overrides.addressWrapper}
                    className={classNames(projectcss.all, sty.addressWrapper)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "date&time",
                      value: args.address,
                      className: classNames(sty.slotTargetAddress)
                    })}
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"closing"}
              data-plasmic-override={overrides.closing}
              className={classNames(projectcss.all, sty.closing)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zouok
                )}
              >
                {
                  "Atas Kehadiran serta doa dan restu Bapak / Ibu / Saudara / i, kami ucapkan terima kasih"
                }
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xvyAf
                )}
              >
                {"Om Shanti Shanti Shanti Om"}
              </div>
            </div>
          ) : null}
        </div>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "imageContainer",
    "heroTitle",
    "h1",
    "freeBox",
    "h3",
    "details",
    "col",
    "title",
    "detailsPengantin",
    "colPria",
    "priaDetailsWrapper",
    "colWanita",
    "priaDetailsWrapper2",
    "greetings",
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper",
    "closing"
  ],
  hero: ["hero", "imageContainer", "heroTitle", "h1", "freeBox", "h3"],
  imageContainer: ["imageContainer"],
  heroTitle: ["heroTitle", "h1", "freeBox", "h3"],
  h1: ["h1"],
  freeBox: ["freeBox", "h3"],
  h3: ["h3"],
  details: [
    "details",
    "col",
    "title",
    "detailsPengantin",
    "colPria",
    "priaDetailsWrapper",
    "colWanita",
    "priaDetailsWrapper2",
    "greetings",
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper",
    "closing"
  ],
  col: [
    "col",
    "title",
    "detailsPengantin",
    "colPria",
    "priaDetailsWrapper",
    "colWanita",
    "priaDetailsWrapper2",
    "greetings",
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper",
    "closing"
  ],
  title: ["title"],
  detailsPengantin: [
    "detailsPengantin",
    "colPria",
    "priaDetailsWrapper",
    "colWanita",
    "priaDetailsWrapper2"
  ],
  colPria: ["colPria", "priaDetailsWrapper"],
  priaDetailsWrapper: ["priaDetailsWrapper"],
  colWanita: ["colWanita", "priaDetailsWrapper2"],
  priaDetailsWrapper2: ["priaDetailsWrapper2"],
  greetings: ["greetings"],
  eventDateTime: [
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper"
  ],
  dateTimeWrapper: ["dateTimeWrapper", "dateWrapper"],
  dateWrapper: ["dateWrapper"],
  timeWrapper: ["timeWrapper", "timeWrapper2"],
  timeWrapper2: ["timeWrapper2"],
  addressWrapperContainer: ["addressWrapperContainer", "addressWrapper"],
  addressWrapper: ["addressWrapper"],
  closing: ["closing"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "header";
  imageContainer: "div";
  heroTitle: "div";
  h1: "h1";
  freeBox: "div";
  h3: "h3";
  details: "section";
  col: "div";
  title: "div";
  detailsPengantin: "div";
  colPria: "div";
  priaDetailsWrapper: "div";
  colWanita: "div";
  priaDetailsWrapper2: "div";
  greetings: "div";
  eventDateTime: "div";
  dateTimeWrapper: "div";
  dateWrapper: "div";
  timeWrapper: "div";
  timeWrapper2: "div";
  addressWrapperContainer: "div";
  addressWrapper: "div";
  closing: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemplate2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTemplate2__VariantsArgs;
    args?: PlasmicTemplate2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTemplate2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTemplate2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTemplate2__ArgProps,
          internalVariantPropNames: PlasmicTemplate2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTemplate2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemplate2";
  } else {
    func.displayName = `PlasmicTemplate2.${nodeName}`;
  }
  return func;
}

export const PlasmicTemplate2 = Object.assign(
  // Top-level PlasmicTemplate2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    imageContainer: makeNodeComponent("imageContainer"),
    heroTitle: makeNodeComponent("heroTitle"),
    h1: makeNodeComponent("h1"),
    freeBox: makeNodeComponent("freeBox"),
    h3: makeNodeComponent("h3"),
    details: makeNodeComponent("details"),
    col: makeNodeComponent("col"),
    title: makeNodeComponent("title"),
    detailsPengantin: makeNodeComponent("detailsPengantin"),
    colPria: makeNodeComponent("colPria"),
    priaDetailsWrapper: makeNodeComponent("priaDetailsWrapper"),
    colWanita: makeNodeComponent("colWanita"),
    priaDetailsWrapper2: makeNodeComponent("priaDetailsWrapper2"),
    greetings: makeNodeComponent("greetings"),
    eventDateTime: makeNodeComponent("eventDateTime"),
    dateTimeWrapper: makeNodeComponent("dateTimeWrapper"),
    dateWrapper: makeNodeComponent("dateWrapper"),
    timeWrapper: makeNodeComponent("timeWrapper"),
    timeWrapper2: makeNodeComponent("timeWrapper2"),
    addressWrapperContainer: makeNodeComponent("addressWrapperContainer"),
    addressWrapper: makeNodeComponent("addressWrapper"),
    closing: makeNodeComponent("closing"),

    // Metadata about props expected for PlasmicTemplate2
    internalVariantProps: PlasmicTemplate2__VariantProps,
    internalArgProps: PlasmicTemplate2__ArgProps
  }
);

export default PlasmicTemplate2;
/* prettier-ignore-end */
