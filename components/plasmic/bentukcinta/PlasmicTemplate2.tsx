// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6366ps4JUXGcyRNfgAokBX
// Component: ujAmoQgB-2l
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: 5FU_u38KTG/codeComponent
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import BrideTitleHero from "../../BrideTitleHero"; // plasmic-import: w1AsPdUUjj/component
import HeroDateTime from "../../HeroDateTime"; // plasmic-import: lGTX7nAbs-/component
import BrideCard from "../../BrideCard"; // plasmic-import: D8Nie4k4_Z/component
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import { AntdImage } from "../../registerImage"; // plasmic-import: FkE2v0mpOg/codeComponent
import { AudioPlayer } from "../../registerAudioplayer"; // plasmic-import: mA6Gaqg1fB/codeComponent
import { Iframe } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: CMDBvOhaI4s/codeComponent

import { useScreenVariants as useScreenVariantslPlKhvYjoqxXf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: lPlKHVYjoqxXF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bentukcinta.module.css"; // plasmic-import: 6366ps4JUXGcyRNfgAokBX/projectcss
import sty from "./PlasmicTemplate2.module.css"; // plasmic-import: ujAmoQgB-2l/css

export type PlasmicTemplate2__VariantMembers = {};

export type PlasmicTemplate2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTemplate2__VariantsArgs;
export const PlasmicTemplate2__VariantProps = new Array<VariantPropType>();

export type PlasmicTemplate2__ArgsType = {
  bgMasshead?: React.ReactNode;
  date?: React.ReactNode;
  time?: React.ReactNode;
  address?: React.ReactNode;
  month?: React.ReactNode;
  year?: React.ReactNode;
  mapsFrame?: React.ReactNode;
  button?: React.ReactNode;
  cardPria?: React.ReactNode;
  cardWanita?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTemplate2__ArgsType;
export const PlasmicTemplate2__ArgProps = new Array<ArgPropType>(
  "bgMasshead",
  "date",
  "time",
  "address",
  "month",
  "year",
  "mapsFrame",
  "button",
  "cardPria",
  "cardWanita"
);

export type PlasmicTemplate2__OverridesType = {
  root?: p.Flex<"div">;
  head?: p.Flex<typeof PlasmicHead>;
  hero?: p.Flex<"header">;
  imageContainer?: p.Flex<"div">;
  slider?: p.Flex<typeof Slider>;
  heroTitle?: p.Flex<"div">;
  col2?: p.Flex<"div">;
  brideTitleHero?: p.Flex<typeof BrideTitleHero>;
  span?: p.Flex<"span">;
  heroDateTime?: p.Flex<typeof HeroDateTime>;
  h4?: p.Flex<"h4">;
  details?: p.Flex<"section">;
  row?: p.Flex<"div">;
  title?: p.Flex<"div">;
  h5?: p.Flex<"h5">;
  detailsPengantin?: p.Flex<"div">;
  colPria?: p.Flex<"div">;
  colWanita?: p.Flex<"div">;
  greetings?: p.Flex<"div">;
  eventDateTime?: p.Flex<"div">;
  dateTimeWrapper?: p.Flex<"div">;
  dateWrapper?: p.Flex<"div">;
  timeWrapper?: p.Flex<"div">;
  timeWrapper2?: p.Flex<"div">;
  addressWrapperContainer?: p.Flex<"div">;
  addressWrapper?: p.Flex<"div">;
  closing?: p.Flex<"div">;
  gallery?: p.Flex<"section">;
  title2?: p.Flex<"div">;
  youtubeWrapper?: p.Flex<"div">;
  youTube?: p.Flex<typeof YouTube>;
  antdImage?: p.Flex<typeof AntdImage>;
  audioWidget?: p.Flex<"div">;
  audioPlayer?: p.Flex<typeof AudioPlayer>;
  maps?: p.Flex<"section">;
  buttonWrapper?: p.Flex<"div">;
  button?: p.Flex<"div">;
  footer?: p.Flex<"footer">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultTemplate2Props {
  bgMasshead?: React.ReactNode;
  date?: React.ReactNode;
  time?: React.ReactNode;
  address?: React.ReactNode;
  month?: React.ReactNode;
  year?: React.ReactNode;
  mapsFrame?: React.ReactNode;
  button?: React.ReactNode;
  cardPria?: React.ReactNode;
  cardWanita?: React.ReactNode;
  className?: string;
}

function PlasmicTemplate2__RenderFunc(props: {
  variants: PlasmicTemplate2__VariantsArgs;
  args: PlasmicTemplate2__ArgsType;
  overrides: PlasmicTemplate2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantslPlKhvYjoqxXf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicHead
        data-plasmic-name={"head"}
        data-plasmic-override={overrides.head}
        className={classNames("__wab_instance", sty.head)}
        description={"Undangan Online BentukCinta.com" as const}
        image={(() => {
          try {
            return $ctx.graphCmsItem.openGraphImage;
          } catch (e) {
            if (e instanceof TypeError) {
              return undefined;
            }
            throw e;
          }
        })()}
        title={(() => {
          try {
            return "Bentuk Cinta | " + $ctx.graphCmsItem.title;
          } catch (e) {
            if (e instanceof TypeError) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {true ? (
        <header
          data-plasmic-name={"hero"}
          data-plasmic-override={overrides.hero}
          className={classNames(projectcss.all, sty.hero)}
        >
          <div
            data-plasmic-name={"imageContainer"}
            data-plasmic-override={overrides.imageContainer}
            className={classNames(projectcss.all, sty.imageContainer)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___5JBmP)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $ctx.graphCmsItem.coverPhoto;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return "https://via.placeholder.com/1920x1080";
                      }
                      throw e;
                    }
                  })()}
                />
              ),

              value: args.bgMasshead
            })}

            <Slider
              data-plasmic-name={"slider"}
              data-plasmic-override={overrides.slider}
              autoplay={true}
              autoplaySpeed={2000 as const}
              className={classNames("__wab_instance", sty.slider)}
              dots={false}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__glzHc)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={(() => {
                  try {
                    return $ctx.graphCmsItem.slideshows[0].slideImageUrl;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return "https://via.placeholder.com/150x90/FF0000/FFFFFF/?text=Slide_1";
                    }
                    throw e;
                  }
                })()}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__uEx0)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={(() => {
                  try {
                    return $ctx.graphCmsItem.slideshows[1].slideImageUrl;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return "https://via.placeholder.com/150x90/00FF00/FFFFFF/?text=Slide_2";
                    }
                    throw e;
                  }
                })()}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ruv7S)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={(() => {
                  try {
                    return $ctx.graphCmsItem.slideshows[2].slideImageUrl;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return "https://via.placeholder.com/150x90/0000FF/FFFFFF/?text=Slide_3";
                    }
                    throw e;
                  }
                })()}
              />
            </Slider>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"heroTitle"}
            data-plasmic-override={overrides.heroTitle}
            hasGap={true}
            className={classNames(projectcss.all, sty.heroTitle)}
          >
            <div
              data-plasmic-name={"col2"}
              data-plasmic-override={overrides.col2}
              className={classNames(projectcss.all, sty.col2)}
            >
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__tHXac
                )}
              >
                {"UNDANGAN PERNIKAHAN"}
              </h6>

              {true ? (
                <BrideTitleHero
                  data-plasmic-name={"brideTitleHero"}
                  data-plasmic-override={overrides.brideTitleHero}
                  brideTitleHero={
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___4Un8U
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <span
                            data-plasmic-name={"span"}
                            data-plasmic-override={overrides.span}
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span
                            )}
                          >
                            {(() => {
                              try {
                                return $ctx.graphCmsItem.title;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Jonh & Marry";
                                }
                                throw e;
                              }
                            })()}
                          </span>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </h1>
                  }
                />
              ) : null}

              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6___31Omm
                )}
              >
                {
                  "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES"
                }
              </h6>

              <HeroDateTime
                data-plasmic-name={"heroDateTime"}
                data-plasmic-override={overrides.heroDateTime}
                className={classNames("__wab_instance", sty.heroDateTime)}
                date={
                  <h4
                    data-plasmic-name={"h4"}
                    data-plasmic-override={overrides.h4}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.evenDateTime.slice(8, 10);
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Date";
                        }
                        throw e;
                      }
                    })()}
                  </h4>
                }
                month={
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__jghE
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 1
                          ? "Jan"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 2
                          ? "Feb"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 3
                          ? "Mar"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 4
                          ? "Apr"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 5
                          ? "May"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 6
                          ? "Jun"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 7
                          ? "Jul"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 8
                          ? "Aug"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 9
                          ? "Sep"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 10
                          ? "Oct"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 11
                          ? "Nov"
                          : "Dec";
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Month";
                        }
                        throw e;
                      }
                    })()}
                  </h6>
                }
                year={
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__vvdBv
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.evenDateTime.slice(0, 4);
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Year";
                        }
                        throw e;
                      }
                    })()}
                  </h6>
                }
              />
            </div>
          </p.Stack>
        </header>
      ) : null}

      <section
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        className={classNames(projectcss.all, sty.details)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"row"}
          data-plasmic-override={overrides.row}
          hasGap={true}
          className={classNames(projectcss.all, sty.row)}
        >
          {true ? (
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___6KhMk
                )}
              >
                {"OmSwastiastu"}
              </h1>

              <h5
                data-plasmic-name={"h5"}
                data-plasmic-override={overrides.h5}
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5
                )}
              >
                {"Mohon Doa Restu"}
              </h5>
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"detailsPengantin"}
            data-plasmic-override={overrides.detailsPengantin}
            hasGap={true}
            className={classNames(projectcss.all, sty.detailsPengantin)}
          >
            <div
              data-plasmic-name={"colPria"}
              data-plasmic-override={overrides.colPria}
              className={classNames(projectcss.all, sty.colPria)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <BrideCard
                    brideName={
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__mkRvD
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span__mXyyw
                              )}
                            >
                              {(() => {
                                try {
                                  return $ctx.graphCmsItem.pengantinPria;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "John Stewart";
                                  }
                                  throw e;
                                }
                              })()}
                            </span>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h4>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.brideCard__oGbhT
                    )}
                    ortuBride={
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__keiMw
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span__p9Gyv
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $ctx.graphCmsItem.bapakPria +
                                    " & " +
                                    $ctx.graphCmsItem.ibuPria
                                  );
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "john lenon & John Lenin";
                                  }
                                  throw e;
                                }
                              })()}
                            </span>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h6>
                    }
                    slot={
                      (() => {
                        try {
                          return $ctx.graphCmsItem.photoPria != null;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dC6Hf)}
                          displayHeight={"200px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"200px" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return $ctx.graphCmsItem.photoPria;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      ) : null
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h0Fw
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__sCVp
                            )}
                          >
                            {(() => {
                              try {
                                return $ctx.graphCmsItem.alamatPria;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "This is address wrapper";
                                }
                                throw e;
                              }
                            })()}
                          </span>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </BrideCard>
                ),

                value: args.cardPria
              })}
            </div>

            <div
              data-plasmic-name={"colWanita"}
              data-plasmic-override={overrides.colWanita}
              className={classNames(projectcss.all, sty.colWanita)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <BrideCard
                    brideName={
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__qlFl
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span__y98Wn
                              )}
                            >
                              {(() => {
                                try {
                                  return $ctx.graphCmsItem.pengantinWanita;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "John Stewart";
                                  }
                                  throw e;
                                }
                              })()}
                            </span>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h4>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.brideCard__oxJst
                    )}
                    ortuBride={
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__jsRxw
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span__rPbm
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $ctx.graphCmsItem.bapakWanita +
                                    " & " +
                                    $ctx.graphCmsItem.ibuWanita
                                  );
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "john lenon & John Lenin";
                                  }
                                  throw e;
                                }
                              })()}
                            </span>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h6>
                    }
                    slot={
                      (() => {
                        try {
                          return $ctx.graphCmsItem.photoWanita != null;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__kaWt0)}
                          displayHeight={"200px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"200px" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return $ctx.graphCmsItem.photoWanita;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      ) : null
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w1ZeW
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__qCFa
                            )}
                          >
                            {(() => {
                              try {
                                return $ctx.graphCmsItem.alamatWanita;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "This is address wrapper";
                                }
                                throw e;
                              }
                            })()}
                          </span>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </BrideCard>
                ),

                value: args.cardWanita
              })}
            </div>
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"greetings"}
              data-plasmic-override={overrides.greetings}
              hasGap={true}
              className={classNames(projectcss.all, sty.greetings)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vaTrz
                )}
              >
                {
                  "Atas Asung Kertha Wara Nugraha Ida Sang Hyang Widhi Wasa/Tuhan Yang Maha Esa kami bermaksud mengundang Bapak/Ibu/Saudara/i pada Upacara Manusa Yadnya Pawiwahan (Pernikahan) Putra dan Putri kami"
                }
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vVpXe
                )}
              >
                {
                  "Merupakan suatu kehormatan dan kebahagiaan bagi kami, apabila Bapak / Ibu / Saudara / i berkenan hadir untuk memberikan doa restu, pada:"
                }
              </div>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"eventDateTime"}
              data-plasmic-override={overrides.eventDateTime}
              hasGap={true}
              className={classNames(projectcss.all, sty.eventDateTime)}
            >
              {true ? (
                <div
                  data-plasmic-name={"dateTimeWrapper"}
                  data-plasmic-override={overrides.dateTimeWrapper}
                  className={classNames(projectcss.all, sty.dateTimeWrapper)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kZqd4
                    )}
                  >
                    {"hari/tanggal"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tyMno
                    )}
                  >
                    {":"}
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"dateWrapper"}
                    data-plasmic-override={overrides.dateWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.dateWrapper)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (() => {
                        try {
                          return $ctx.graphCmsItem.evenDateTime.slice(8, 10);
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Tanggal";
                          }
                          throw e;
                        }
                      })(),
                      value: args.date,
                      className: classNames(sty.slotTargetDate)
                    })}

                    {p.renderPlasmicSlot({
                      defaultContents: (() => {
                        try {
                          return $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 1
                            ? "Jan"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 2
                            ? "Feb"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 3
                            ? "Mar"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 4
                            ? "Apr"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 5
                            ? "May"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 6
                            ? "Jun"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 7
                            ? "Jul"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 8
                            ? "Aug"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 9
                            ? "Sep"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 10
                            ? "Oct"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 11
                            ? "Nov"
                            : "Dec";
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Bulan";
                          }
                          throw e;
                        }
                      })(),
                      value: args.month,
                      className: classNames(sty.slotTargetMonth)
                    })}

                    {p.renderPlasmicSlot({
                      defaultContents: (() => {
                        try {
                          return $ctx.graphCmsItem.evenDateTime.slice(0, 4);
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Tahun";
                          }
                          throw e;
                        }
                      })(),
                      value: args.year,
                      className: classNames(sty.slotTargetYear)
                    })}
                  </p.Stack>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"timeWrapper"}
                  data-plasmic-override={overrides.timeWrapper}
                  className={classNames(projectcss.all, sty.timeWrapper)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yzBM
                    )}
                  >
                    {"Pukul"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p5YmD
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"timeWrapper2"}
                    data-plasmic-override={overrides.timeWrapper2}
                    className={classNames(projectcss.all, sty.timeWrapper2)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (() => {
                        try {
                          return (
                            $ctx.graphCmsItem.evenDateTime.slice(11, 16) +
                            " s/d Selesai"
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "time";
                          }
                          throw e;
                        }
                      })(),
                      value: args.time,
                      className: classNames(sty.slotTargetTime)
                    })}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"addressWrapperContainer"}
                  data-plasmic-override={overrides.addressWrapperContainer}
                  className={classNames(
                    projectcss.all,
                    sty.addressWrapperContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i4ESu
                    )}
                  >
                    {"Alamat"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gnjgm
                    )}
                  >
                    {":"}
                  </div>

                  <div
                    data-plasmic-name={"addressWrapper"}
                    data-plasmic-override={overrides.addressWrapper}
                    className={classNames(projectcss.all, sty.addressWrapper)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (() => {
                        try {
                          return $ctx.graphCmsItem.eventLocation;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Alamat";
                          }
                          throw e;
                        }
                      })(),
                      value: args.address,
                      className: classNames(sty.slotTargetAddress)
                    })}
                  </div>
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"closing"}
              data-plasmic-override={overrides.closing}
              hasGap={true}
              className={classNames(projectcss.all, sty.closing)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gyPcT
                )}
              >
                {
                  "Atas Kehadiran serta doa dan restu Bapak / Ibu / Saudara / i, kami ucapkan terima kasih"
                }
              </div>

              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__eJfhZ
                )}
              >
                {"Om Shanti Shanti Shanti Om"}
              </h1>
            </p.Stack>
          ) : null}
        </p.Stack>
      </section>

      <section
        data-plasmic-name={"gallery"}
        data-plasmic-override={overrides.gallery}
        className={classNames(projectcss.all, sty.gallery)}
      >
        {true ? (
          <div
            data-plasmic-name={"title2"}
            data-plasmic-override={overrides.title2}
            className={classNames(projectcss.all, sty.title2)}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__rkeGi
              )}
            >
              {"Gallery"}
            </h1>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zfzkj
              )}
            >
              {
                '"Ya Tuhanku yang Maha Pengasih, anugerahkanlah kepada pasangan pengantin ini senantiasa berbahagia keduanya tiada terpisahkan, panjang umur, semoga pengantin ini dianugerahkan putra dan cucu yang memberikan penghiburan, tinggal dirumah yang penuh kebahagiaan.”'
              }
            </div>
          </div>
        ) : null}
        {(() => {
          try {
            return $ctx.graphCmsItem.youtubeUrl != null;
          } catch (e) {
            if (e instanceof TypeError) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"youtubeWrapper"}
            data-plasmic-override={overrides.youtubeWrapper}
            className={classNames(projectcss.all, sty.youtubeWrapper)}
          >
            <YouTube
              data-plasmic-name={"youTube"}
              data-plasmic-override={overrides.youTube}
              className={classNames("__wab_instance", sty.youTube)}
              videoId={(() => {
                try {
                  return $ctx.graphCmsItem.youtubeUrl;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "R6MeLqRQzYw";
                  }
                  throw e;
                }
              })()}
            />
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__uUeMv)}>
          {(() => {
            try {
              return $ctx.graphCmsItem.galleries;
            } catch (e) {
              if (e instanceof TypeError) {
                return [];
              }
              throw e;
            }
          })().map((currentItem, currentIndex) => (
            <div
              className={classNames(projectcss.all, sty.freeBox__uocpc)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iIpP8)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qItLu)}
                  displayHeight={"250px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"300px" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return currentItem.photoGallery;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <AntdImage
                  data-plasmic-name={"antdImage"}
                  data-plasmic-override={overrides.antdImage}
                  className={classNames("__wab_instance", sty.antdImage)}
                  src={(() => {
                    try {
                      return currentItem.photoGallery;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return "https://via.placeholder.com/150";
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            </div>
          ))}
        </div>

        {(() => {
          try {
            return $ctx.graphCmsItem.audioUrl != null;
          } catch (e) {
            if (e instanceof TypeError) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"audioWidget"}
            data-plasmic-override={overrides.audioWidget}
            className={classNames(projectcss.all, sty.audioWidget)}
          >
            <AudioPlayer
              data-plasmic-name={"audioPlayer"}
              data-plasmic-override={overrides.audioPlayer}
              audioURL={(() => {
                try {
                  return $ctx.graphCmsItem.audioUrl;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.audioPlayer)}
            />
          </div>
        ) : null}
      </section>

      <section
        data-plasmic-name={"maps"}
        data-plasmic-override={overrides.maps}
        className={classNames(projectcss.all, sty.maps)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Iframe
              className={classNames("__wab_instance", sty.iframe__mbG1)}
              preview={true}
              src={(() => {
                try {
                  return $ctx.graphCmsItem.gmapsEmbed;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "https://www.example.com";
                  }
                  throw e;
                }
              })()}
            />
          ),

          value: args.mapsFrame
        })}

        <div
          data-plasmic-name={"buttonWrapper"}
          data-plasmic-override={overrides.buttonWrapper}
          className={classNames(projectcss.all, sty.buttonWrapper)}
        >
          <div
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames(projectcss.all, sty.button)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tg6VS
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return (
                        "https://www.google.com/maps/place/" +
                        $ctx.graphCmsItem.eventMap.latitude +
                        "," +
                        $ctx.graphCmsItem.eventMap.longitude
                      );
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  {"Buka Petunjuk Arah"}
                </p.PlasmicLink>
              ),

              value: args.button
            })}
          </div>
        </div>
      </section>

      <footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(projectcss.all, sty.footer)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___15Xxw)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qnetc
              )}
            >
              {"Build with 💖 by"}
            </div>

            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              component={Link}
              href={`/`}
              platform={"nextjs"}
            >
              {"Bentukcinta.com"}
            </p.PlasmicLink>
          </p.Stack>
        ) : null}
      </footer>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "head",
    "hero",
    "imageContainer",
    "slider",
    "heroTitle",
    "col2",
    "brideTitleHero",
    "span",
    "heroDateTime",
    "h4",
    "details",
    "row",
    "title",
    "h5",
    "detailsPengantin",
    "colPria",
    "colWanita",
    "greetings",
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper",
    "closing",
    "gallery",
    "title2",
    "youtubeWrapper",
    "youTube",
    "antdImage",
    "audioWidget",
    "audioPlayer",
    "maps",
    "buttonWrapper",
    "button",
    "footer",
    "link"
  ],
  head: ["head"],
  hero: [
    "hero",
    "imageContainer",
    "slider",
    "heroTitle",
    "col2",
    "brideTitleHero",
    "span",
    "heroDateTime",
    "h4"
  ],
  imageContainer: ["imageContainer", "slider"],
  slider: ["slider"],
  heroTitle: [
    "heroTitle",
    "col2",
    "brideTitleHero",
    "span",
    "heroDateTime",
    "h4"
  ],
  col2: ["col2", "brideTitleHero", "span", "heroDateTime", "h4"],
  brideTitleHero: ["brideTitleHero", "span"],
  span: ["span"],
  heroDateTime: ["heroDateTime", "h4"],
  h4: ["h4"],
  details: [
    "details",
    "row",
    "title",
    "h5",
    "detailsPengantin",
    "colPria",
    "colWanita",
    "greetings",
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper",
    "closing"
  ],
  row: [
    "row",
    "title",
    "h5",
    "detailsPengantin",
    "colPria",
    "colWanita",
    "greetings",
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper",
    "closing"
  ],
  title: ["title", "h5"],
  h5: ["h5"],
  detailsPengantin: ["detailsPengantin", "colPria", "colWanita"],
  colPria: ["colPria"],
  colWanita: ["colWanita"],
  greetings: ["greetings"],
  eventDateTime: [
    "eventDateTime",
    "dateTimeWrapper",
    "dateWrapper",
    "timeWrapper",
    "timeWrapper2",
    "addressWrapperContainer",
    "addressWrapper"
  ],
  dateTimeWrapper: ["dateTimeWrapper", "dateWrapper"],
  dateWrapper: ["dateWrapper"],
  timeWrapper: ["timeWrapper", "timeWrapper2"],
  timeWrapper2: ["timeWrapper2"],
  addressWrapperContainer: ["addressWrapperContainer", "addressWrapper"],
  addressWrapper: ["addressWrapper"],
  closing: ["closing"],
  gallery: [
    "gallery",
    "title2",
    "youtubeWrapper",
    "youTube",
    "antdImage",
    "audioWidget",
    "audioPlayer"
  ],
  title2: ["title2"],
  youtubeWrapper: ["youtubeWrapper", "youTube"],
  youTube: ["youTube"],
  antdImage: ["antdImage"],
  audioWidget: ["audioWidget", "audioPlayer"],
  audioPlayer: ["audioPlayer"],
  maps: ["maps", "buttonWrapper", "button"],
  buttonWrapper: ["buttonWrapper", "button"],
  button: ["button"],
  footer: ["footer", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  head: typeof PlasmicHead;
  hero: "header";
  imageContainer: "div";
  slider: typeof Slider;
  heroTitle: "div";
  col2: "div";
  brideTitleHero: typeof BrideTitleHero;
  span: "span";
  heroDateTime: typeof HeroDateTime;
  h4: "h4";
  details: "section";
  row: "div";
  title: "div";
  h5: "h5";
  detailsPengantin: "div";
  colPria: "div";
  colWanita: "div";
  greetings: "div";
  eventDateTime: "div";
  dateTimeWrapper: "div";
  dateWrapper: "div";
  timeWrapper: "div";
  timeWrapper2: "div";
  addressWrapperContainer: "div";
  addressWrapper: "div";
  closing: "div";
  gallery: "section";
  title2: "div";
  youtubeWrapper: "div";
  youTube: typeof YouTube;
  antdImage: typeof AntdImage;
  audioWidget: "div";
  audioPlayer: typeof AudioPlayer;
  maps: "section";
  buttonWrapper: "div";
  button: "div";
  footer: "footer";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemplate2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTemplate2__VariantsArgs;
    args?: PlasmicTemplate2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTemplate2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTemplate2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTemplate2__ArgProps,
          internalVariantPropNames: PlasmicTemplate2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTemplate2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemplate2";
  } else {
    func.displayName = `PlasmicTemplate2.${nodeName}`;
  }
  return func;
}

export const PlasmicTemplate2 = Object.assign(
  // Top-level PlasmicTemplate2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    head: makeNodeComponent("head"),
    hero: makeNodeComponent("hero"),
    imageContainer: makeNodeComponent("imageContainer"),
    slider: makeNodeComponent("slider"),
    heroTitle: makeNodeComponent("heroTitle"),
    col2: makeNodeComponent("col2"),
    brideTitleHero: makeNodeComponent("brideTitleHero"),
    span: makeNodeComponent("span"),
    heroDateTime: makeNodeComponent("heroDateTime"),
    h4: makeNodeComponent("h4"),
    details: makeNodeComponent("details"),
    row: makeNodeComponent("row"),
    title: makeNodeComponent("title"),
    h5: makeNodeComponent("h5"),
    detailsPengantin: makeNodeComponent("detailsPengantin"),
    colPria: makeNodeComponent("colPria"),
    colWanita: makeNodeComponent("colWanita"),
    greetings: makeNodeComponent("greetings"),
    eventDateTime: makeNodeComponent("eventDateTime"),
    dateTimeWrapper: makeNodeComponent("dateTimeWrapper"),
    dateWrapper: makeNodeComponent("dateWrapper"),
    timeWrapper: makeNodeComponent("timeWrapper"),
    timeWrapper2: makeNodeComponent("timeWrapper2"),
    addressWrapperContainer: makeNodeComponent("addressWrapperContainer"),
    addressWrapper: makeNodeComponent("addressWrapper"),
    closing: makeNodeComponent("closing"),
    gallery: makeNodeComponent("gallery"),
    title2: makeNodeComponent("title2"),
    youtubeWrapper: makeNodeComponent("youtubeWrapper"),
    youTube: makeNodeComponent("youTube"),
    antdImage: makeNodeComponent("antdImage"),
    audioWidget: makeNodeComponent("audioWidget"),
    audioPlayer: makeNodeComponent("audioPlayer"),
    maps: makeNodeComponent("maps"),
    buttonWrapper: makeNodeComponent("buttonWrapper"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicTemplate2
    internalVariantProps: PlasmicTemplate2__VariantProps,
    internalArgProps: PlasmicTemplate2__ArgProps
  }
);

export default PlasmicTemplate2;
/* prettier-ignore-end */
