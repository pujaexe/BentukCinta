// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6366ps4JUXGcyRNfgAokBX
// Component: SVNXSXhQAU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TombolCinta from "../../TombolCinta"; // plasmic-import: KWGUqEZOm9/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bentukcinta.module.css"; // plasmic-import: 6366ps4JUXGcyRNfgAokBX/projectcss
import sty from "./PlasmicMenubarCollapse.module.css"; // plasmic-import: SVNXSXhQAU/css

export type PlasmicMenubarCollapse__VariantMembers = {};

export type PlasmicMenubarCollapse__VariantsArgs = {};
type VariantPropType = keyof PlasmicMenubarCollapse__VariantsArgs;
export const PlasmicMenubarCollapse__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMenubarCollapse__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMenubarCollapse__ArgsType;
export const PlasmicMenubarCollapse__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicMenubarCollapse__OverridesType = {
  root?: p.Flex<"div">;
  ul?: p.Flex<"ul">;
  li?: p.Flex<"li">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  tombolCinta?: p.Flex<typeof TombolCinta>;
};

export interface DefaultMenubarCollapseProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicMenubarCollapse__RenderFunc(props: {
  variants: PlasmicMenubarCollapse__VariantsArgs;
  args: PlasmicMenubarCollapse__ArgsType;
  overrides: PlasmicMenubarCollapse__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <ul
        data-plasmic-name={"ul"}
        data-plasmic-override={overrides.ul}
        className={classNames(projectcss.all, projectcss.ul, sty.ul)}
      >
        <li
          data-plasmic-name={"li"}
          data-plasmic-override={overrides.li}
          className={classNames(projectcss.all, projectcss.li, sty.li)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__aOaNu
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r2Duw
                    )}
                  >
                    {"Tentang Kami"}
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__wstx4
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zUgk
                    )}
                  >
                    {"Fitur"}
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___2BrN
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Dj38
                    )}
                  >
                    {"Harga"}
                  </div>
                </p.PlasmicLink>
              </React.Fragment>
            ),
            value: args.children
          })}
        </li>
      </ul>

      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        href={
          "https://api.whatsapp.com/send?phone=%2b6281916567373%20&text=Hi,%20saya%20mau%20pesan%20undangan%20online." as const
        }
        platform={"nextjs"}
      >
        <TombolCinta
          data-plasmic-name={"tombolCinta"}
          data-plasmic-override={overrides.tombolCinta}
          className={classNames("__wab_instance", sty.tombolCinta)}
          size={"small" as const}
        >
          {"Contact Us"}
        </TombolCinta>
      </p.PlasmicLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "ul", "li", "link", "tombolCinta"],
  ul: ["ul", "li"],
  li: ["li"],
  link: ["link", "tombolCinta"],
  tombolCinta: ["tombolCinta"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  ul: "ul";
  li: "li";
  link: "a";
  tombolCinta: typeof TombolCinta;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenubarCollapse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenubarCollapse__VariantsArgs;
    args?: PlasmicMenubarCollapse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenubarCollapse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMenubarCollapse__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMenubarCollapse__ArgProps,
          internalVariantPropNames: PlasmicMenubarCollapse__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMenubarCollapse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenubarCollapse";
  } else {
    func.displayName = `PlasmicMenubarCollapse.${nodeName}`;
  }
  return func;
}

export const PlasmicMenubarCollapse = Object.assign(
  // Top-level PlasmicMenubarCollapse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),
    link: makeNodeComponent("link"),
    tombolCinta: makeNodeComponent("tombolCinta"),

    // Metadata about props expected for PlasmicMenubarCollapse
    internalVariantProps: PlasmicMenubarCollapse__VariantProps,
    internalArgProps: PlasmicMenubarCollapse__ArgProps
  }
);

export default PlasmicMenubarCollapse;
/* prettier-ignore-end */
